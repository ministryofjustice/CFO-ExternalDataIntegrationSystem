
@using Messaging;
@using Messaging.Messages;
@using Messaging.Messages.StatusMessages;
@using RabbitMQ.Client.Events;
@using System.Text;
@using System.Globalization;
@using System.Text.Json;
@using Messaging.Queues;
@using Messaging.Interfaces;

<h3 style="margin-bottom: 10px; text-decoration: underline;" >
    DMS Status Updates:
</h3>
<ul>
    @foreach (string statusUpdate in statusUpdates)
    {
        <li>
            <h5>@statusUpdate</h5>
        </li>
    }
</ul>

@code {

    [Parameter, EditorRequired]
    public required EventCallback SetDMSInactive { get; set; }

    [Inject]
    private IStatusMessagingService messageService { get; init; } = null!;

    private List<string> statusUpdates = new List<string> { };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        messageService.StatusSubscribe<StatusUpdateMessage>(async(message) => await AddStatusUpdate(message), TStatusQueue.StatusUpdate);
        messageService.StatusSubscribe<StagingFinishedMessage>(async(message) => await OnStagingFinished(message), TStatusQueue.StagingFinished);
    }

    private async Task AddStatusUpdate(StatusUpdateMessage message)
    {
        statusUpdates.Add($"{DateTime.Now.ToString(new CultureInfo("en-GB"))}: {message.message}");

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnStagingFinished(StagingFinishedMessage message)
    {
        statusUpdates.Add($"{DateTime.Now.ToString(new CultureInfo("en-GB"))}: {message.message}");

        await Task.Delay(5000);
        await SetDMSInactive.InvokeAsync();

        await InvokeAsync(StateHasChanged);
    }
}
