
@using FileStorage;
@using Messaging.Messages.StagingMessages.Delius
@using Messaging.Messages.StagingMessages.Offloc
@using Microsoft.AspNetCore.Antiforgery
@using Web.ConfigClasses;
@using Messaging;
@using Messaging.Messages;
@using Messaging.Messages.StagingMessages;
@using Messaging.Messages.DbMessages.Sending;
@using Messaging.Messages.DbMessages.Receiving;
@using Messaging.Interfaces;
@using Microsoft.AspNetCore;

<div style="display: flex;">
    <div style="justify-items: center;">
        @if (!fileStatus.offlocStatus)
        {
            <h5>Please place the offloc file in the following directory: "@fileLocations.offlocInput"</h5>
        }
        @if (!fileStatus.deliusStatus)
        {
            <h5>Please place the delius file in the following directory: "@fileLocations.deliusInput"</h5>
        }
        <button type="button" @onsubmit:preventDefault @onclick:preventDefault @onclick="async() => await SendKickoffMessage()">
            Kickoff
        </button>
    </div>
</div>

@code {

    [Parameter, EditorRequired]
    public required EventCallback SetDMSActive { get; set; }

    [Inject]
    protected IStagingMessagingService messageService { get; init; } = null!;

    [Inject]
    protected IDbMessagingService dbMessagingService { get; init; } = null!;

    [Inject]
    protected IFileLocations fileLocations { get; init; } = null!;

    [Inject]
    protected DownloadFilesStatus fileStatus { get; init; } = null!; //Will likely be defined from frontend in future.

    protected async Task SendKickoffMessage()
    {
        await PreKickoffTasks();

        if (fileStatus.offlocStatus)
        {
            messageService.StagingPublish(new OfflocKickoffMessage());
        }
        else
        {
            messageService.StagingPublish(new OfflocDownloadFinished());
        }

        if (fileStatus.deliusStatus)
        {
            messageService.StagingPublish(new DeliusKickoffMessage());
        }
        else
        {
            messageService.StagingPublish(new DeliusDownloadFinishedMessage());
        }

        await SetDMSActive.InvokeAsync();
    }

    private async Task PreKickoffTasks()
    {
        await Task.CompletedTask;

        messageService.StagingPublish(new ClearHalfCleanedOfflocFiles());

        messageService.StagingPublish(new ClearTemporaryDeliusFiles());

        dbMessagingService.DbTransientSubscribe<ClearDeliusStaging, ResultClearDeliusStaging>(new ClearDeliusStaging());

        dbMessagingService.DbTransientSubscribe<ClearOfflocStaging, ResultClearOfflocStaging>(new ClearOfflocStaging());
    }

    protected bool CheckFileType(IBrowserFile file, string expectedType)
    {
        if (file.ContentType == expectedType)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}
